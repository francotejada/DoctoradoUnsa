
#include "stdafx.h"

#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/core/core.hpp>
#include "opencv2/opencv.hpp"
 
#include <iostream>
#include <string>

#include <iostream>
#include <stdio.h>
#include <string>

#include <sstream>
#include <fstream>

#include "Calibrador.h"

using namespace cv;
using namespace std;

Mat src, src2, src3, src4, src_gray, srcx;
int MAX_KERNEL_LENGTH = 36;
RNG rng(12345);

int IMAGE_WIDTH =  640;
int IMAGE_HEIGHT = 360;
float S = (IMAGE_WIDTH/8);
float T = (0.15f);
	

template<typename T>
std::string toString(const T& value)
{
    std::ostringstream oss;
    oss << value;
    return oss.str();
}

void adaptiveThreshold(unsigned char* input, unsigned char* bin)
{
	
	unsigned long* integralImg = 0;
	int i, j;
	long sum=0;
	int count=0;
	int index;
	int x1, y1, x2, y2;
	int s2 = S/2;

	// create the integral image
	integralImg = (unsigned long*)malloc(IMAGE_WIDTH*IMAGE_HEIGHT*sizeof(unsigned long*));

	for (i=0; i<IMAGE_WIDTH; i++)
	{
		// reset this column sum
		sum = 0;

		for (j=0; j<IMAGE_HEIGHT; j++)
		{
			index = j*IMAGE_WIDTH+i;

			sum += input[index];
			if (i==0)
				integralImg[index] = sum;
			else
				integralImg[index] = integralImg[index-1] + sum;
		}
	}

	// perform thresholding
	for (i=0; i<IMAGE_WIDTH; i++)
	{
		for (j=0; j<IMAGE_HEIGHT; j++)
		{
			index = j*IMAGE_WIDTH+i;

			// set the SxS region
			x1=i-s2; x2=i+s2;
			y1=j-s2; y2=j+s2;

			// check the border
			if (x1 < 0) x1 = 0;
			if (x2 >= IMAGE_WIDTH) x2 = IMAGE_WIDTH-1;
			if (y1 < 0) y1 = 0;
			if (y2 >= IMAGE_HEIGHT) y2 = IMAGE_HEIGHT-1;
			
			count = (x2-x1)*(y2-y1);

			// I(x,y)=s(x2,y2)-s(x1,y2)-s(x2,y1)+s(x1,x1)
			sum = integralImg[y2*IMAGE_WIDTH+x2] -
				  integralImg[y1*IMAGE_WIDTH+x2] -
				  integralImg[y2*IMAGE_WIDTH+x1] +
				  integralImg[y1*IMAGE_WIDTH+x1];

			if ((long)(input[index]*count) < (long)(sum*(1.0-T)))
				bin[index] = 0;
			else
				bin[index] = 255;
		}
	}

	free (integralImg);
}

static void calcChessboardCorners(Size boardSize, float squareSize, std::vector<cv::Point3f>& corners)
{
	for( int i = 0; i < boardSize.height; i++ )
            for( int j = 0; j < boardSize.width; j++ )
                corners.push_back(Point3f(float((2*j + i % 2)*squareSize),
                                          float(i*squareSize), 0));
	
        
}

int main(int argc, char** argv)
{
	int contador = 1;
	vector<Vec3f> circles;
	int nimage = 1;
	ofstream salida("Salida.txt");

	std::vector<cv::Point3f> corners3D;
	std::vector<cv::Point2f> corners2D;//findChessboardCorners guarda los puntos del tablero aqui
	std::vector<std::vector<cv::Point2f>> coord2D;//Ubicacion de las esquinas detectadas en la imagen
	std::vector<std::vector<cv::Point3f>> coord3D;//Ubicacion real de los puntos 3D

	Size patternsize(4,11); //(6,5); // 7, 7
	
	calcChessboardCorners(patternsize,35,corners3D);

	string video = "Asymmetric.mp4";

	VideoCapture cap(video); // open the default camera
    if(!cap.isOpened())  // check if we succeeded
        return -1;

	double count = cap.get(CV_CAP_PROP_FRAME_COUNT); //get the frame count
    //cap.set(CV_CAP_PROP_POS_FRAMES,count-1); //Set index to last frame
	cout<<count;

    Mat edges;
    namedWindow("edges",1);
	int cont= 0;
    for(;;)
    {

	cap >> src; // get a new frame from camera

    if (cont == 10)   {   
    
        
	//src = imread("PadronAnillos_" + toString(nimage) + ".jpg",1);
    
	cvtColor(src, src_gray, CV_BGR2GRAY);
	imshow("Escala de grises", src_gray);

	//blur( image1, image2, Size( i, i ), Point(-1,-1) );
	GaussianBlur( src_gray, src2, Size( 7, 7 ), 0, 0 );
	imshow("Gaussiano", src2);
		
	// Set maxValue, blockSize and c (constant value)
	double maxValue = 255;
	int blockSize = 115;
	double c = 1;
		    
	unsigned char *output;
	IplImage* binImg;
	
	
	binImg = cvCreateImage(cvSize(IMAGE_WIDTH, IMAGE_HEIGHT), 8, 1);
    IplImage* image2=cvCloneImage(&(IplImage)src2);

	adaptiveThreshold((unsigned char*)image2->imageData, (unsigned char*)binImg->imageData);
	
	cvShowImage("Adaptive Threshold", binImg);
	
	src4 = cv::cvarrToMat(binImg);
		
	Mat threshold_output;
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;

	// ------------------------------------------------------------------------------

	findContours( src4, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

    /// Find the rotated rectangles and ellipses for each contour
    vector<RotatedRect> minRect( contours.size() );
    vector<RotatedRect> minEllipse( contours.size() );

    for( int i = 0; i < contours.size(); i++ )
    {  minRect[i] = minAreaRect( Mat(contours[i]) );
       if( contours[i].size() > 5 && contours[i].size() < 60 )
         { minEllipse[i] = fitEllipse( Mat(contours[i]) ); } 
    }

    /// Draw contours + rotated rects + ellipses
    Mat drawing = Mat::zeros( src4.size(), CV_8UC3 );

    Size2f a1;
    int es_concentrico = 0;

	

    for( int i = 0; i< contours.size(); i++ )
    {
          Scalar color = Scalar(254,254,254);// Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
       
          Point2f a = minEllipse[i].center;
		  
		  es_concentrico = 0;

		  for( int j = i -1; j < contours.size(); j++ )
          {			  
			  if (j >= 0) {
				  Point2f b = minEllipse[j].center;
				  if (minEllipse[i].size != minEllipse[j].size) {  
					  double res = cv::norm(a-b);
					  if (res < 100) {
						  es_concentrico = 1;
						  //cout<<res<<endl;
						  break;
					  }
				  }
			  }
		  }

		  a1 = (Size2f) minEllipse[i].size;
		  
		  if (a1.area() > 10.0 && a1.area() < 130.0 /*&& es_concentrico*/ ) {
			  ellipse( drawing, minEllipse[i], color, 2, 8 );		  
		  } 
	        
     }

    /// Show in a window
    namedWindow( "Contours", CV_WINDOW_AUTOSIZE );
    imshow( "Contours", drawing );
	   
	
    vector<Point2f> centers; 

    bool patternfound =  findCirclesGrid(drawing,patternsize,centers ,CALIB_CB_ASYMMETRIC_GRID);  
	//findChessboardCorners(aux,patternsize,centers, CALIB_CB_ASYMMETRIC_GRID );
	//findChessboardCorners( view, s.boardSize, pointBuf,  CALIB_CB_ADAPTIVE_THRESH | CALIB_CB_NORMALIZE_IMAGE;
		
	if (patternfound) {

		cout<<centers.size()<<endl;

		//cornerSubPix(src_gray, centers, Size(11, 11), Size(-1, -1), TermCriteria(CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 30, 0.1));
            
		drawChessboardCorners(src, patternsize, Mat(centers), patternfound);

		imshow( "chess", src );
		coord2D.push_back(centers);
        coord3D.push_back(corners3D);

		nimage++;
    
	// ------------------------------------------------------------------------------

	}
		    
    
   // imshow("Resultado", src);
	cout<<"Imagen "<<nimage<<" cont: "<< cont <<endl;
	

	if (nimage == 35) break;
			

	cont=0;
	}
	else {
		cont++;
		}
	waitKey(1);
    }

	cap.release();

	// Closes all the frames
    destroyAllWindows();

	Mat cameraMatrix = Mat::eye(3, 3, CV_64F);
	Mat distCoeffs = Mat::zeros(8, 1, CV_64F);
	std::vector<Mat> rvecs;
	std::vector<Mat> tvecs;
   
	double rms = calibrateCamera(coord3D, coord2D, src.size(), cameraMatrix,
                  distCoeffs, rvecs, tvecs, 
									/*CALIB_FIX_PRINCIPAL_POINT +
									CALIB_FIX_ASPECT_RATIO +
									CALIB_ZERO_TANGENT_DIST */
									CV_CALIB_FIX_K3 + CV_CALIB_FIX_K4 + CV_CALIB_FIX_K5
									,TermCriteria(CV_TERMCRIT_ITER + CV_TERMCRIT_EPS, 30, 2.22e-16));

	salida << "RMS: " << rms << std::endl;
	salida << "Camera matrix: " << cameraMatrix << std::endl;
	salida << "Distortion _coefficients: " << distCoeffs << std::endl;
    
	Mat imageUndistorted,image;
	namedWindow("imgOriginal");
	namedWindow("imgCalibrada");
	
	
	VideoCapture cap2(video);
    cap2 >> image;
    undistort(image, imageUndistorted, cameraMatrix, distCoeffs);//corrigo distorsion radial

    imshow("imgOriginal", image);
    imshow("imgCalibrada", imageUndistorted);
    waitKey(200);
	

	system("pause");
	return 0;
}


